@startuml
!pragma teoz true
autonumber


title eOverdracht Patient Transfer\nwithout NutsAuthCred (SOLL)

box Sender
    actor SenderCareProf as "Care\nProfessional"
    participant SenderXIS as "XIS"
    box Nuts Node
        participant SenderNode as "SSI Service"
        participant SenderWallet as "Wallet"
    end box
end box
box Receiver (recv)
    box Nuts Node
        participant ReceiverNode as "SSI Service"
        participant ReceiverWallet as "Wallet"
    end box
    participant ReceiverXIS as "XIS"
    actor ReceiverCareProf as "Care\nProfessional\n(browser)"
end box

SenderCareProf -> SenderXIS : Initiate\npatient transfer\n(recvDID)
SenderXIS -> SenderXIS : Create\ntransfer
group Sender notifies Receiver
    group Notify Endpoint Discovery
        SenderXIS -> SenderNode : Lookup recv notification endpoint
        SenderNode -> ReceiverNode : Resolve recvDID
        ReceiverNode --> SenderNode : recv DID document
        SenderNode --> SenderXIS: 200 OK\nrecv notification endpoint
    end group

    SenderXIS -> SenderNode : Request Access Token w/o ID\n[service-to-service flow]\n(recvDID, scope)
    note right : "scope" is currently known as purposeOfUse
    SenderNode -> SenderNode : Resolve recv metadata URL\n(TBD, well-known or DID service)
    SenderNode -> ReceiverNode : Get AuthzServer metadata
    ReceiverNode --> SenderNode : 200 OK\nmetadata
    SenderNode -> SenderWallet : Initiate OAuth2 vp_token flow\n(scope, AuthzServer metadata)
    group Service-to-Service OAuth2 Flow (to be spec'd)
        SenderNode -> ReceiverNode : Get presentation definition\n(scope)
        ReceiverNode --> SenderNode : presentation definition
        SenderNode -> SenderWallet : Match presentation definition
        SenderWallet -> SenderWallet : Find matching credentials
        SenderWallet -> SenderWallet : Sign presentation,\ncreate submission
        SenderWallet --> SenderNode : presentation submission
        SenderNode -> SenderNode : Apply business rules to presentation
        note right
            Business rules can be used to control
            which credentials the wallet is allowed to present, to avoid leaking PII.
            For Nuts it's probably a hardcoded list of VC types.
        end note
        SenderNode -> ReceiverNode : Submit presentation
        ReceiverNode -> ReceiverNode : Verify presentation,\nmatch with requested scope
        ReceiverNode -> ReceiverNode : Create access token
        ReceiverNode --> SenderNode : Access token
    end group
    SenderNode --> SenderXIS : Access token
    SenderXIS -> ReceiverXIS : Notify\n(fhirTaskID,access token)
    ReceiverXIS --> ReceiverNode : Verify access token
    ReceiverNode --> ReceiverXIS : OK
    ReceiverXIS -> ReceiverXIS : Verify resource/scope
    ReceiverXIS --> SenderXIS : OK
end group
SenderXIS --> SenderCareProf : OK

group Receiver XIS retrieves data (automated process)
    note across
        The receiving XIS executes the same service-to-service OAuth2 flow
        as specified above, to get an access token for querying the sender's XIS.
        It is omitted for brevity.
    end note
    ReceiverXIS -> SenderXIS : Read FHIR Task\n(fhirTaskID, access token)
    SenderXIS -> SenderNode : Verify access token
    SenderNode --> SenderXIS : OK
    SenderXIS -> SenderXIS : Verify resource/scope
    SenderXIS -> ReceiverXIS : FHIR Task resource
    ReceiverXIS -> ReceiverXIS : Register received\ntransfer
end group
group Receiver care professional retrieves data
    ReceiverCareProf -> ReceiverXIS : View transfer details
    ReceiverXIS -> ReceiverNode : Request Access Token with ID\n[OpenID4VP flow]\n(senderDID, scope)
    ReceiverNode -> ReceiverNode : Resolver sender Authz Server metadata
    note left
        Metadata lookup same as specified ealier,
        It is omitted for brevity.
    end note
    ReceiverNode -> ReceiverNode : Create wallet URL,\nwith burner auth token
    ReceiverNode --> ReceiverXIS : walletURL, state
    ReceiverXIS --> ReceiverCareProf : redirect to walletURL
    group loop
        ReceiverXIS -> ReceiverNode : check state
        ReceiverNode --> ReceiverXIS : state
    end group

    group Shown as IFrame in browser window or desktop application
        ReceiverCareProf -> ReceiverWallet : Opens walletURL in IFrame
        ReceiverWallet -> ReceiverWallet : Create user session
        ReceiverWallet --> ReceiverCareProf : sets session cookie

        group OpenID4VP Flow Option #1
            note across
                Consequence: we redirect the browser to the remote SSI service, which is fine if there's 1 remote resource,
                but becomes cumbersome if data needs to be pulled from multiple sources, requiring multiple OpenID4VP flows and thus browser redirects.
                If one of them, fails the process breaks unless complicated Javascript is in place to orchestrate things?
            end note

            ReceiverWallet --> ReceiverCareProf : Redirect browser to remote OpenID4VP Verifier
            ReceiverCareProf -> SenderNode : Trigger OpenID4VP
            note left : This is an OAuth2 authorization code flow
            SenderNode -> SenderNode : Resolver sender Authz Server metadata\n(need authorization_endpoint)
            note left
                Metadata lookup same as specified ealier,
                It is omitted for brevity.
            end note
            SenderNode --> ReceiverCareProf : Redirect to wallet (HTTP 302)
            ReceiverCareProf -> ReceiverNode : /authorize?response_type=id_token&scope=openid&presentation_definition=...
            group Creating vp_token
                ReceiverNode -> ReceiverWallet : Match presentation definition
                ReceiverWallet -> ReceiverWallet : Match, create\npresentation submission
                ReceiverWallet --> ReceiverNode : presentation submission
                note right
                    Business rules can be used to control
                    which credentials the wallet is allowed to present, to avoid leaking PII.
                    For Nuts it's probably a hardcoded list of VC types.
                end note
            end group
            group Creating id_token
                ReceiverNode -> ReceiverWallet : Match presentation definition
                ReceiverWallet -> ReceiverWallet : Match, create\npresentation submission
                ReceiverWallet --> ReceiverNode : presentation submission
                ReceiverNode -> ReceiverNode : Apply business rules to presentation

            end group
        end group
    end group

    group OpenID4VP Flow
        note across
            We require 2 claims:
             - From the care organization (OrganizationCredential), which comes from the "organization wallet"
             - From the end-user (CareProfessionalCredential), which comes from the user's personal wallet (or an attestation from his/her employer)
            We could use vp_token for the care org. cred and id_token for the end-user cred,
            but the SSI service does not need user consent to access the care org. cred.: it's an organizational credential, not a personal one.
            But the CareProffCredential does, so we'd need to use the OpenID4VP flow for that.
            Which is weird, since the flow is meant to build the vp_token, and the id_token is expected to be already there?

            Otherwise, if the goal of the flow is to get the id_token, it's actually a negotiation between the remote XIS and the end-user's wallet,
            not the organization's wallet. And since the end-user's wallet could be a mobile wallet, this would not interop with the OpenID4VP flow as implemented.

            Alternatively, we could consider the organization wallet as either the end-user's wallet (in case the organization's system attests the user auth),
            or a proxy to it (which could use another OpenID4VP or CHAPI flow to interact with the actual user's wallet?)
        end note
        note across
            Issue: In traditional OpenID terms, the browser (RP) interacts with the resource owner (remote XIS) via Javascript.
            But in this case, it is the receiver XIS that makes calls on behalf of the user.
            This is an issue, since in OpenID4VP the flow starts with the user interacting with the verifier/resource owner
            (the remote XIS), which then redirects the user to its wallet (own Nuts node/wallet) to authenticate.
            But; the browser isn't visiting the remote XIS (resource owner, verifier), but its own XIS.

            So: we'd have to redirect the IFrame to the remote SSI Service, which triggers the
        end note
    end group
end group
@enduml